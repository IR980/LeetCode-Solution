class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
        List<List<Integer>> currInd=new ArrayList<>();
        Arrays.sort(nums);
        FindCombination(0,nums,new ArrayList<>(),result);
        return result;
    }
    private static void FindCombination(int index,int[] nums,List<Integer>currInd,List<List<Integer>> result){
        result.add(new ArrayList<>(currInd)); // add current subset
        for (int i=index;i<nums.length;i++){
            if (i!=index && nums[i]==nums[i-1]){ // skip duplicates value
                continue;
            }
            currInd.add(nums[i]);
            FindCombination(i+1,nums,currInd,result); // recursion to build subset
            currInd.remove(currInd.size()-1); // backtrack
        }    
    }
}    
