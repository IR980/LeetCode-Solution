class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];
        for (int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        List<List<String>> result=new ArrayList<>();
        backtrack(board,0,n,result);
        return result;
    }
    private void backtrack(char[][] board,int row,int n,List<List<String>> result){
        if (row==n){
            List<String> temp=new ArrayList<>();
            for (int i=0;i<n;i++){
                String str="";
                for (int j=0;j<n;j++){
                    str+=board[i][j];
                }
                temp.add(str);
            }
            result.add(temp);
            return;
        }
        for (int col=0;col<board.length;col++){
            if (isSafe(board,row,col,n)){
                board[row][col]='Q';
                backtrack(board,row+1,n,result);
                board[row][col]='.';
            }
        }
    }
    private static boolean isSafe(char[][] board,int row,int col,int n){
        // check vertical
        for (int i=row-1;i>=0;i--){
            if (board[i][col]=='Q'){
                return false;
            }
        }
        // diagonal left up
        for (int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if (board[i][j]=='Q'){
                return false;
            }
        }
        // diagonal right up
        for (int i=row-1,j=col+1;i>=0 && j<board.length;i--,j++){
            if (board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
}
